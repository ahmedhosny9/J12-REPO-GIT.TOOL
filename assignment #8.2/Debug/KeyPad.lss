
KeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00000a3e  00000ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080011e  0080011e  00000b90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b42  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba5  00000000  00000000  000028a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d38  00000000  00000000  0000344b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00004184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000abb  00000000  00000000  0000494f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000540a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 31       	cpi	r26, 0x1E	; 30
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e1       	ldi	r26, 0x1E	; 30
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 32       	cpi	r26, 0x2A	; 42
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ae 03 	call	0x75c	; 0x75c <main>
  8a:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:

void ADC_Init(void)
{
   #if   ADC_VOLTAGE_REF      == ADC_VREF_AVCC
   
SET_BIT(ADMUX,6);
  92:	3e 9a       	sbi	0x07, 6	; 7
CLR_BIT(ADMUX,7);
  94:	3f 98       	cbi	0x07, 7	; 7

#endif

#if      ADC_CHANNEL          == ADC_CHANNEL_1

SET_BIT(ADMUX,0);
  96:	38 9a       	sbi	0x07, 0	; 7

#endif

   #if   ADC_ADJUST           == ADC_RIGHT_ADJUST

CLR_BIT(ADMUX,5);
  98:	3d 98       	cbi	0x07, 5	; 7

#endif

   #if   ADC_CON_TRIGER       == ADC_AUTO_TRIGGER

SET_BIT(ADCSRA,5);
  9a:	35 9a       	sbi	0x06, 5	; 6

#endif

   #if   ADC_PRESC            == ADC_PRESC_128

SET_BIT(ADCSRA,0);
  9c:	30 9a       	sbi	0x06, 0	; 6
SET_BIT(ADCSRA,1);
  9e:	31 9a       	sbi	0x06, 1	; 6
SET_BIT(ADCSRA,2);
  a0:	32 9a       	sbi	0x06, 2	; 6

#endif

   #if   ADC_INTERRUPT_STATUS == ADC_INTERRUPT_DISABLE

CLR_BIT(ADCSRA,3);
  a2:	33 98       	cbi	0x06, 3	; 6

#endif	

/*enable adc*/

SET_BIT(ADCSRA,7);
  a4:	37 9a       	sbi	0x06, 7	; 6
  a6:	08 95       	ret

000000a8 <ADC_Read>:

void ADC_Read(uint16* val)
{
uint16 	Digital_value = 0;

SET_BIT(ADCSRA,6);
  a8:	36 9a       	sbi	0x06, 6	; 6


#if ADC_INTERRUPT_STATUS == ADC_INTERRUPT_DISABLE

while( ! GET_BIT(ADCSRA,4));
  aa:	34 9b       	sbis	0x06, 4	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_Read+0x2>

Digital_value = ADC_Adjust;
  ae:	64 b1       	in	r22, 0x04	; 4
  b0:	75 b1       	in	r23, 0x05	; 5

*val=( (  Digital_value * 500 ) /1024 );   //5v=5000mv  5000/10mv == 500  2~10=1024
  b2:	44 ef       	ldi	r20, 0xF4	; 244
  b4:	51 e0       	ldi	r21, 0x01	; 1
  b6:	64 9f       	mul	r22, r20
  b8:	90 01       	movw	r18, r0
  ba:	65 9f       	mul	r22, r21
  bc:	30 0d       	add	r19, r0
  be:	74 9f       	mul	r23, r20
  c0:	30 0d       	add	r19, r0
  c2:	11 24       	eor	r1, r1
  c4:	23 2f       	mov	r18, r19
  c6:	26 95       	lsr	r18
  c8:	26 95       	lsr	r18
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
  ce:	11 82       	std	Z+1, r1	; 0x01
  d0:	08 95       	ret

000000d2 <DIO_SetPinDir>:

			break;

		case DIO_PORTD :

			*Val = PIND;
  d2:	44 23       	and	r20, r20
  d4:	b9 f1       	breq	.+110    	; 0x144 <DIO_SetPinDir+0x72>
  d6:	41 30       	cpi	r20, 0x01	; 1
  d8:	09 f0       	breq	.+2      	; 0xdc <DIO_SetPinDir+0xa>
  da:	6b c0       	rjmp	.+214    	; 0x1b2 <DIO_SetPinDir+0xe0>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	89 f0       	breq	.+34     	; 0x102 <DIO_SetPinDir+0x30>
  e0:	28 f0       	brcs	.+10     	; 0xec <DIO_SetPinDir+0x1a>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	c9 f0       	breq	.+50     	; 0x118 <DIO_SetPinDir+0x46>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	11 f1       	breq	.+68     	; 0x12e <DIO_SetPinDir+0x5c>
  ea:	08 95       	ret
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SetPinDir+0x26>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SetPinDir+0x22>
  fc:	82 2b       	or	r24, r18
  fe:	8a bb       	out	0x1a, r24	; 26
 100:	08 95       	ret
 102:	27 b3       	in	r18, 0x17	; 23
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_SetPinDir+0x3c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_SetPinDir+0x38>
 112:	82 2b       	or	r24, r18
 114:	87 bb       	out	0x17, r24	; 23
 116:	08 95       	ret
 118:	24 b3       	in	r18, 0x14	; 20
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_SetPinDir+0x52>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_SetPinDir+0x4e>
 128:	82 2b       	or	r24, r18
 12a:	84 bb       	out	0x14, r24	; 20
 12c:	08 95       	ret
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDir+0x68>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDir+0x64>
 13e:	82 2b       	or	r24, r18
 140:	81 bb       	out	0x11, r24	; 17
 142:	08 95       	ret
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	91 f0       	breq	.+36     	; 0x16c <DIO_SetPinDir+0x9a>
 148:	28 f0       	brcs	.+10     	; 0x154 <DIO_SetPinDir+0x82>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	d9 f0       	breq	.+54     	; 0x184 <DIO_SetPinDir+0xb2>
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	29 f1       	breq	.+74     	; 0x19c <DIO_SetPinDir+0xca>
 152:	08 95       	ret
 154:	2a b3       	in	r18, 0x1a	; 26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_SetPinDir+0x8e>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_SetPinDir+0x8a>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	8a bb       	out	0x1a, r24	; 26
 16a:	08 95       	ret
 16c:	27 b3       	in	r18, 0x17	; 23
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPinDir+0xa6>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SetPinDir+0xa2>
 17c:	80 95       	com	r24
 17e:	82 23       	and	r24, r18
 180:	87 bb       	out	0x17, r24	; 23
 182:	08 95       	ret
 184:	24 b3       	in	r18, 0x14	; 20
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_SetPinDir+0xbe>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_SetPinDir+0xba>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	84 bb       	out	0x14, r24	; 20
 19a:	08 95       	ret
 19c:	21 b3       	in	r18, 0x11	; 17
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_SetPinDir+0xd6>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_SetPinDir+0xd2>
 1ac:	80 95       	com	r24
 1ae:	82 23       	and	r24, r18
 1b0:	81 bb       	out	0x11, r24	; 17
 1b2:	08 95       	ret

000001b4 <DIO_WritePin>:
 1b4:	44 23       	and	r20, r20
 1b6:	b9 f1       	breq	.+110    	; 0x226 <DIO_WritePin+0x72>
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	09 f0       	breq	.+2      	; 0x1be <DIO_WritePin+0xa>
 1bc:	6b c0       	rjmp	.+214    	; 0x294 <DIO_WritePin+0xe0>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	89 f0       	breq	.+34     	; 0x1e4 <DIO_WritePin+0x30>
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <DIO_WritePin+0x1a>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	c9 f0       	breq	.+50     	; 0x1fa <DIO_WritePin+0x46>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	11 f1       	breq	.+68     	; 0x210 <DIO_WritePin+0x5c>
 1cc:	08 95       	ret
 1ce:	2b b3       	in	r18, 0x1b	; 27
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_WritePin+0x26>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_WritePin+0x22>
 1de:	82 2b       	or	r24, r18
 1e0:	8b bb       	out	0x1b, r24	; 27
 1e2:	08 95       	ret
 1e4:	28 b3       	in	r18, 0x18	; 24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_WritePin+0x3c>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_WritePin+0x38>
 1f4:	82 2b       	or	r24, r18
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	08 95       	ret
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_WritePin+0x52>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_WritePin+0x4e>
 20a:	82 2b       	or	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
 210:	22 b3       	in	r18, 0x12	; 18
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_WritePin+0x68>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_WritePin+0x64>
 220:	82 2b       	or	r24, r18
 222:	82 bb       	out	0x12, r24	; 18
 224:	08 95       	ret
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	91 f0       	breq	.+36     	; 0x24e <DIO_WritePin+0x9a>
 22a:	28 f0       	brcs	.+10     	; 0x236 <DIO_WritePin+0x82>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	d9 f0       	breq	.+54     	; 0x266 <DIO_WritePin+0xb2>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	29 f1       	breq	.+74     	; 0x27e <DIO_WritePin+0xca>
 234:	08 95       	ret
 236:	2b b3       	in	r18, 0x1b	; 27
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_WritePin+0x8e>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_WritePin+0x8a>
 246:	80 95       	com	r24
 248:	82 23       	and	r24, r18
 24a:	8b bb       	out	0x1b, r24	; 27
 24c:	08 95       	ret
 24e:	28 b3       	in	r18, 0x18	; 24
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_WritePin+0xa6>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_WritePin+0xa2>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	88 bb       	out	0x18, r24	; 24
 264:	08 95       	ret
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_WritePin+0xbe>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_WritePin+0xba>
 276:	80 95       	com	r24
 278:	82 23       	and	r24, r18
 27a:	85 bb       	out	0x15, r24	; 21
 27c:	08 95       	ret
 27e:	22 b3       	in	r18, 0x12	; 18
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_WritePin+0xd6>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_WritePin+0xd2>
 28e:	80 95       	com	r24
 290:	82 23       	and	r24, r18
 292:	82 bb       	out	0x12, r24	; 18
 294:	08 95       	ret

00000296 <DIO_ReadPin>:



void DIO_ReadPin (uint8 Port ,uint8 Pin, uint8* Val)
{
	switch (Port)
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	89 f0       	breq	.+34     	; 0x2bc <DIO_ReadPin+0x26>
 29a:	28 f0       	brcs	.+10     	; 0x2a6 <DIO_ReadPin+0x10>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	c9 f0       	breq	.+50     	; 0x2d2 <DIO_ReadPin+0x3c>
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	11 f1       	breq	.+68     	; 0x2e8 <DIO_ReadPin+0x52>
 2a4:	08 95       	ret
			{
			case DIO_PORTA :

				*Val =  GET_BIT(PINA,Pin);
 2a6:	89 b3       	in	r24, 0x19	; 25
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_ReadPin+0x1a>
 2ac:	95 95       	asr	r25
 2ae:	87 95       	ror	r24
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_ReadPin+0x16>
 2b4:	81 70       	andi	r24, 0x01	; 1
 2b6:	fa 01       	movw	r30, r20
 2b8:	80 83       	st	Z, r24

				break;
 2ba:	08 95       	ret

			case DIO_PORTB :

				*Val = GET_BIT(PINB,Pin);
 2bc:	86 b3       	in	r24, 0x16	; 22
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_ReadPin+0x30>
 2c2:	95 95       	asr	r25
 2c4:	87 95       	ror	r24
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_ReadPin+0x2c>
 2ca:	81 70       	andi	r24, 0x01	; 1
 2cc:	fa 01       	movw	r30, r20
 2ce:	80 83       	st	Z, r24

				break;
 2d0:	08 95       	ret

			case DIO_PORTC :

				*Val = GET_BIT(PINC,Pin);
 2d2:	83 b3       	in	r24, 0x13	; 19
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_ReadPin+0x46>
 2d8:	95 95       	asr	r25
 2da:	87 95       	ror	r24
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_ReadPin+0x42>
 2e0:	81 70       	andi	r24, 0x01	; 1
 2e2:	fa 01       	movw	r30, r20
 2e4:	80 83       	st	Z, r24

				break;
 2e6:	08 95       	ret

			case DIO_PORTD :

				*Val = GET_BIT(PIND,Pin);
 2e8:	80 b3       	in	r24, 0x10	; 16
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_ReadPin+0x5c>
 2ee:	95 95       	asr	r25
 2f0:	87 95       	ror	r24
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_ReadPin+0x58>
 2f6:	81 70       	andi	r24, 0x01	; 1
 2f8:	fa 01       	movw	r30, r20
 2fa:	80 83       	st	Z, r24
 2fc:	08 95       	ret

000002fe <DIO_SetPullUp>:



void DIO_SetPullUp(uint8 Port ,uint8 Pin )
{
	switch(Port)
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	89 f0       	breq	.+34     	; 0x324 <DIO_SetPullUp+0x26>
 302:	28 f0       	brcs	.+10     	; 0x30e <DIO_SetPullUp+0x10>
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	c9 f0       	breq	.+50     	; 0x33a <DIO_SetPullUp+0x3c>
 308:	83 30       	cpi	r24, 0x03	; 3
 30a:	11 f1       	breq	.+68     	; 0x350 <DIO_SetPullUp+0x52>
 30c:	08 95       	ret
	{

		case DIO_PORTA :

		SET_BIT(PORTA,Pin);
 30e:	2b b3       	in	r18, 0x1b	; 27
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_SetPullUp+0x1c>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_SetPullUp+0x18>
 31e:	82 2b       	or	r24, r18
 320:	8b bb       	out	0x1b, r24	; 27

		break;
 322:	08 95       	ret

		case DIO_PORTB :

		SET_BIT(PORTB,Pin);
 324:	28 b3       	in	r18, 0x18	; 24
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_SetPullUp+0x32>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_SetPullUp+0x2e>
 334:	82 2b       	or	r24, r18
 336:	88 bb       	out	0x18, r24	; 24

		break;
 338:	08 95       	ret

		case DIO_PORTC :

		SET_BIT(PORTC,Pin);
 33a:	25 b3       	in	r18, 0x15	; 21
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_SetPullUp+0x48>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_SetPullUp+0x44>
 34a:	82 2b       	or	r24, r18
 34c:	85 bb       	out	0x15, r24	; 21

		break;
 34e:	08 95       	ret

		case DIO_PORTD :

		SET_BIT(PORTD,Pin);
 350:	22 b3       	in	r18, 0x12	; 18
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_SetPullUp+0x5e>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_SetPullUp+0x5a>
 360:	82 2b       	or	r24, r18
 362:	82 bb       	out	0x12, r24	; 18
 364:	08 95       	ret

00000366 <KeyPad_Init>:
																					  
											  
										  
void KeyPad_Init(void)
{
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_0, DIO_PIN_OUTPUT);
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_1, DIO_PIN_OUTPUT);
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_2, DIO_PIN_OUTPUT);
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	62 e0       	ldi	r22, 0x02	; 2
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_3, DIO_PIN_OUTPUT);
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	63 e0       	ldi	r22, 0x03	; 3
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
	
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_0, DIO_PIN_INPUT);
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	64 e0       	ldi	r22, 0x04	; 4
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_1, DIO_PIN_INPUT);
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	65 e0       	ldi	r22, 0x05	; 5
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
    DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_2, DIO_PIN_INPUT);
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	66 e0       	ldi	r22, 0x06	; 6
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_3, DIO_PIN_INPUT);
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	67 e0       	ldi	r22, 0x07	; 7
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
	
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_0 );
 3b6:	64 e0       	ldi	r22, 0x04	; 4
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_1 );
 3be:	65 e0       	ldi	r22, 0x05	; 5
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_2 );
 3c6:	66 e0       	ldi	r22, 0x06	; 6
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_3 );
 3ce:	67 e0       	ldi	r22, 0x07	; 7
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_SetPullUp>
	
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_0, DIO_PIN_HIGH);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_1, DIO_PIN_HIGH);
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_2, DIO_PIN_HIGH);
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	62 e0       	ldi	r22, 0x02	; 2
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_3, DIO_PIN_HIGH);
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	63 e0       	ldi	r22, 0x03	; 3
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
 3fe:	08 95       	ret

00000400 <KeyPad_GetValue>:
	
}

uint8 KeyPad_GetValue(void)
{
 400:	bf 92       	push	r11
 402:	cf 92       	push	r12
 404:	df 92       	push	r13
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	1f 92       	push	r1
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
	
	uint8 LOC_ROW = 0;
	
	uint8 Value = 0;
	
	uint8 Temp = 0;
 418:	19 82       	std	Y+1, r1	; 0x01
 41a:	0f 2e       	mov	r0, r31
 41c:	f0 e6       	ldi	r31, 0x60	; 96
 41e:	cf 2e       	mov	r12, r31
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	df 2e       	mov	r13, r31
 424:	f0 2d       	mov	r31, r0
	
	uint8 LOC_Coloum = 0;
	
	uint8 LOC_ROW = 0;
	
	uint8 Value = 0;
 426:	b1 2c       	mov	r11, r1
	
	uint8 Temp = 0;
	
	for(LOC_Coloum = COL_INIT ; LOC_Coloum <= COL_FINAL ; LOC_Coloum++)
 428:	00 e0       	ldi	r16, 0x00	; 0
	{
		
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_LOW);
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	60 2f       	mov	r22, r16
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
 434:	76 01       	movw	r14, r12
		
		for(LOC_ROW = ROW_INIT ; LOC_ROW <= ROW_FINAL ; LOC_ROW++)
 436:	14 e0       	ldi	r17, 0x04	; 4
		{
			
			DIO_ReadPin (KEYPAD_PORT ,LOC_ROW , &Temp);
 438:	ae 01       	movw	r20, r28
 43a:	4f 5f       	subi	r20, 0xFF	; 255
 43c:	5f 4f       	sbci	r21, 0xFF	; 255
 43e:	61 2f       	mov	r22, r17
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	0e 94 4b 01 	call	0x296	; 0x296 <DIO_ReadPin>
			
			if(!Temp)
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	81 11       	cpse	r24, r1
 44a:	12 c0       	rjmp	.+36     	; 0x470 <KeyPad_GetValue+0x70>
			{
				Value = KeyPad_Vlues[LOC_ROW - ROW_INIT][LOC_Coloum - COL_INIT];
 44c:	f7 01       	movw	r30, r14
 44e:	b0 80       	ld	r11, Z
				
				while(!Temp)
				{
					DIO_ReadPin (KEYPAD_PORT ,LOC_ROW , &Temp);
 450:	ae 01       	movw	r20, r28
 452:	4f 5f       	subi	r20, 0xFF	; 255
 454:	5f 4f       	sbci	r21, 0xFF	; 255
 456:	61 2f       	mov	r22, r17
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	0e 94 4b 01 	call	0x296	; 0x296 <DIO_ReadPin>
			
			if(!Temp)
			{
				Value = KeyPad_Vlues[LOC_ROW - ROW_INIT][LOC_Coloum - COL_INIT];
				
				while(!Temp)
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	88 23       	and	r24, r24
 462:	b1 f3       	breq	.-20     	; 0x450 <KeyPad_GetValue+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 464:	8f e3       	ldi	r24, 0x3F	; 63
 466:	9c e9       	ldi	r25, 0x9C	; 156
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <KeyPad_GetValue+0x68>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <KeyPad_GetValue+0x6e>
 46e:	00 00       	nop
	for(LOC_Coloum = COL_INIT ; LOC_Coloum <= COL_FINAL ; LOC_Coloum++)
	{
		
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_LOW);
		
		for(LOC_ROW = ROW_INIT ; LOC_ROW <= ROW_FINAL ; LOC_ROW++)
 470:	1f 5f       	subi	r17, 0xFF	; 255
 472:	94 e0       	ldi	r25, 0x04	; 4
 474:	e9 0e       	add	r14, r25
 476:	f1 1c       	adc	r15, r1
 478:	18 30       	cpi	r17, 0x08	; 8
 47a:	f1 f6       	brne	.-68     	; 0x438 <KeyPad_GetValue+0x38>
				_delay_ms(10);
			}		
			
		}
		
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_HIGH);
 47c:	41 e0       	ldi	r20, 0x01	; 1
 47e:	60 2f       	mov	r22, r16
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	
	uint8 Value = 0;
	
	uint8 Temp = 0;
	
	for(LOC_Coloum = COL_INIT ; LOC_Coloum <= COL_FINAL ; LOC_Coloum++)
 486:	0f 5f       	subi	r16, 0xFF	; 255
 488:	ef ef       	ldi	r30, 0xFF	; 255
 48a:	ce 1a       	sub	r12, r30
 48c:	de 0a       	sbc	r13, r30
 48e:	04 30       	cpi	r16, 0x04	; 4
 490:	61 f6       	brne	.-104    	; 0x42a <KeyPad_GetValue+0x2a>
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_HIGH);
	}
	
	return Value ;
	
 492:	8b 2d       	mov	r24, r11
 494:	0f 90       	pop	r0
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	df 90       	pop	r13
 4a4:	cf 90       	pop	r12
 4a6:	bf 90       	pop	r11
 4a8:	08 95       	ret

000004aa <LCD_WriteCommand>:
#endif
	
}

void LCD_WriteCommand(uint8 cmd)
{
 4aa:	cf 93       	push	r28
 4ac:	c8 2f       	mov	r28, r24
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RS_PIN, DIO_PIN_LOW);
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RW_PIN, DIO_PIN_LOW);
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	62 e0       	ldi	r22, 0x02	; 2
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
 4cc:	8b b3       	in	r24, 0x1b	; 27
 4ce:	9c 2f       	mov	r25, r28
 4d0:	90 7f       	andi	r25, 0xF0	; 240
 4d2:	8f 70       	andi	r24, 0x0F	; 15
 4d4:	89 2b       	or	r24, r25
 4d6:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 4d8:	41 e0       	ldi	r20, 0x01	; 1
 4da:	63 e0       	ldi	r22, 0x03	; 3
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
 4e2:	8f e9       	ldi	r24, 0x9F	; 159
 4e4:	9f e0       	ldi	r25, 0x0F	; 15
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LCD_WriteCommand+0x3c>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <LCD_WriteCommand+0x42>
 4ec:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	63 e0       	ldi	r22, 0x03	; 3
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	
	PORTA = (cmd << 4) | (PORTA & 0x0F);
 4f8:	2b b3       	in	r18, 0x1b	; 27
 4fa:	30 e1       	ldi	r19, 0x10	; 16
 4fc:	c3 9f       	mul	r28, r19
 4fe:	c0 01       	movw	r24, r0
 500:	11 24       	eor	r1, r1
 502:	92 2f       	mov	r25, r18
 504:	9f 70       	andi	r25, 0x0F	; 15
 506:	89 2b       	or	r24, r25
 508:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 50a:	41 e0       	ldi	r20, 0x01	; 1
 50c:	63 e0       	ldi	r22, 0x03	; 3
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
 514:	8f e9       	ldi	r24, 0x9F	; 159
 516:	9f e0       	ldi	r25, 0x0F	; 15
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <LCD_WriteCommand+0x6e>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_WriteCommand+0x74>
 51e:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	63 e0       	ldi	r22, 0x03	; 3
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
 52a:	8f e1       	ldi	r24, 0x1F	; 31
 52c:	9e e4       	ldi	r25, 0x4E	; 78
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <LCD_WriteCommand+0x84>
 532:	00 c0       	rjmp	.+0      	; 0x534 <LCD_WriteCommand+0x8a>
 534:	00 00       	nop
	
	_delay_ms(5);
	
}
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <LCD_Init>:
	
	_delay_ms(5);
	
	#elif LCD_MODE == 4
	
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_RS_PIN , DIO_PIN_OUTPUT);
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_RW_PIN , DIO_PIN_OUTPUT);
 544:	41 e0       	ldi	r20, 0x01	; 1
 546:	62 e0       	ldi	r22, 0x02	; 2
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_E_PIN , DIO_PIN_OUTPUT);
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	63 e0       	ldi	r22, 0x03	; 3
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
		
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D4 , DIO_PIN_OUTPUT);
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	64 e0       	ldi	r22, 0x04	; 4
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D5 , DIO_PIN_OUTPUT);
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	65 e0       	ldi	r22, 0x05	; 5
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D6 , DIO_PIN_OUTPUT);
 56c:	41 e0       	ldi	r20, 0x01	; 1
 56e:	66 e0       	ldi	r22, 0x06	; 6
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D7 , DIO_PIN_OUTPUT);
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	67 e0       	ldi	r22, 0x07	; 7
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_SetPinDir>
 580:	2f ef       	ldi	r18, 0xFF	; 255
 582:	81 ee       	ldi	r24, 0xE1	; 225
 584:	94 e0       	ldi	r25, 0x04	; 4
 586:	21 50       	subi	r18, 0x01	; 1
 588:	80 40       	sbci	r24, 0x00	; 0
 58a:	90 40       	sbci	r25, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <LCD_Init+0x4c>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <LCD_Init+0x56>
 590:	00 00       	nop
		
		_delay_ms(100);
		
		LCD_WriteCommand(0x33);
 592:	83 e3       	ldi	r24, 0x33	; 51
 594:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
		LCD_WriteCommand(0x32);
 598:	82 e3       	ldi	r24, 0x32	; 50
 59a:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
		LCD_WriteCommand(0x28);
 59e:	88 e2       	ldi	r24, 0x28	; 40
 5a0:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
		LCD_WriteCommand(0x0C);
 5a4:	8c e0       	ldi	r24, 0x0C	; 12
 5a6:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
        LCD_WriteCommand(0x01);
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
		LCD_WriteCommand(0x06);
 5b0:	86 e0       	ldi	r24, 0x06	; 6
 5b2:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
		LCD_WriteCommand(0x02);
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
 5bc:	08 95       	ret

000005be <LCD_WriteChar>:
	
}


void LCD_WriteChar(uint8 data)
{
 5be:	cf 93       	push	r28
 5c0:	c8 2f       	mov	r28, r24
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RS_PIN, DIO_PIN_HIGH);
 5c2:	41 e0       	ldi	r20, 0x01	; 1
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RW_PIN, DIO_PIN_LOW);
 5cc:	40 e0       	ldi	r20, 0x00	; 0
 5ce:	62 e0       	ldi	r22, 0x02	; 2
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	63 e0       	ldi	r22, 0x03	; 3
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	
	PORTA = (data & 0xF0) ;
 5e0:	8c 2f       	mov	r24, r28
 5e2:	80 7f       	andi	r24, 0xF0	; 240
 5e4:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 5e6:	41 e0       	ldi	r20, 0x01	; 1
 5e8:	63 e0       	ldi	r22, 0x03	; 3
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
 5f0:	8f e9       	ldi	r24, 0x9F	; 159
 5f2:	9f e0       	ldi	r25, 0x0F	; 15
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <LCD_WriteChar+0x36>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <LCD_WriteChar+0x3c>
 5fa:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 5fc:	40 e0       	ldi	r20, 0x00	; 0
 5fe:	63 e0       	ldi	r22, 0x03	; 3
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
	
	PORTA = (data << 4) ;
 606:	c2 95       	swap	r28
 608:	c0 7f       	andi	r28, 0xF0	; 240
 60a:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	63 e0       	ldi	r22, 0x03	; 3
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
 616:	8f e9       	ldi	r24, 0x9F	; 159
 618:	9f e0       	ldi	r25, 0x0F	; 15
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <LCD_WriteChar+0x5c>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD_WriteChar+0x62>
 620:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 622:	40 e0       	ldi	r20, 0x00	; 0
 624:	63 e0       	ldi	r22, 0x03	; 3
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WritePin>
 62c:	8f e1       	ldi	r24, 0x1F	; 31
 62e:	9e e4       	ldi	r25, 0x4E	; 78
 630:	01 97       	sbiw	r24, 0x01	; 1
 632:	f1 f7       	brne	.-4      	; 0x630 <LCD_WriteChar+0x72>
 634:	00 c0       	rjmp	.+0      	; 0x636 <LCD_WriteChar+0x78>
 636:	00 00       	nop
	
	_delay_ms(5);
}
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <LCD_WriteString>:

void LCD_WriteString(uint8 str[])
{
 63c:	0f 93       	push	r16
 63e:	1f 93       	push	r17
 640:	cf 93       	push	r28
 642:	fc 01       	movw	r30, r24
	uint8 i = 0;
	
	while(str[i] != '\0')
 644:	80 81       	ld	r24, Z
 646:	88 23       	and	r24, r24
 648:	59 f0       	breq	.+22     	; 0x660 <LCD_WriteString+0x24>
 64a:	8f 01       	movw	r16, r30
 64c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_WriteChar(str[i]);
 64e:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_WriteChar>
		i++;
 652:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_WriteString(uint8 str[])
{
	uint8 i = 0;
	
	while(str[i] != '\0')
 654:	f8 01       	movw	r30, r16
 656:	ec 0f       	add	r30, r28
 658:	f1 1d       	adc	r31, r1
 65a:	80 81       	ld	r24, Z
 65c:	81 11       	cpse	r24, r1
 65e:	f7 cf       	rjmp	.-18     	; 0x64e <LCD_WriteString+0x12>
	{
		LCD_WriteChar(str[i]);
		i++;
	}
}
 660:	cf 91       	pop	r28
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	08 95       	ret

00000668 <LCD_GoTo>:

void LCD_GoTo(uint8 row, uint8 col)
{
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	00 d0       	rcall	.+0      	; 0x66e <LCD_GoTo+0x6>
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
	uint8 pos[2] = {0x80 , 0xC0};
 672:	90 e8       	ldi	r25, 0x80	; 128
 674:	99 83       	std	Y+1, r25	; 0x01
 676:	90 ec       	ldi	r25, 0xC0	; 192
 678:	9a 83       	std	Y+2, r25	; 0x02
		
	LCD_WriteCommand(pos[row]+col);
 67a:	fe 01       	movw	r30, r28
 67c:	e8 0f       	add	r30, r24
 67e:	f1 1d       	adc	r31, r1
 680:	81 81       	ldd	r24, Z+1	; 0x01
 682:	86 0f       	add	r24, r22
 684:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
		
}
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	08 95       	ret

00000692 <LCD_Clear>:



void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
 698:	08 95       	ret

0000069a <LCD_WriteIntger>:
}

void LCD_WriteIntger  (sint32 num)
{
 69a:	4f 92       	push	r4
 69c:	5f 92       	push	r5
 69e:	6f 92       	push	r6
 6a0:	7f 92       	push	r7
 6a2:	af 92       	push	r10
 6a4:	bf 92       	push	r11
 6a6:	cf 92       	push	r12
 6a8:	df 92       	push	r13
 6aa:	ef 92       	push	r14
 6ac:	ff 92       	push	r15
 6ae:	1f 93       	push	r17
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	00 d0       	rcall	.+0      	; 0x6b6 <LCD_WriteIntger+0x1c>
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
 6ba:	6b 01       	movw	r12, r22
 6bc:	7c 01       	movw	r14, r24
	
	sint8 str[2]={0,0},l=2,i=l;
 6be:	19 82       	std	Y+1, r1	; 0x01
 6c0:	1a 82       	std	Y+2, r1	; 0x02
	
	
	if(num<0)
 6c2:	99 23       	and	r25, r25
 6c4:	5c f4       	brge	.+22     	; 0x6dc <LCD_WriteIntger+0x42>
	{
		LCD_WriteChar('-');
 6c6:	8d e2       	ldi	r24, 0x2D	; 45
 6c8:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_WriteChar>
		num*=-1;
 6cc:	f0 94       	com	r15
 6ce:	e0 94       	com	r14
 6d0:	d0 94       	com	r13
 6d2:	c0 94       	com	r12
 6d4:	c1 1c       	adc	r12, r1
 6d6:	d1 1c       	adc	r13, r1
 6d8:	e1 1c       	adc	r14, r1
 6da:	f1 1c       	adc	r15, r1
	}
	
	while(num>0)
 6dc:	1c 14       	cp	r1, r12
 6de:	1d 04       	cpc	r1, r13
 6e0:	1e 04       	cpc	r1, r14
 6e2:	1f 04       	cpc	r1, r15
 6e4:	1c f5       	brge	.+70     	; 0x72c <LCD_WriteIntger+0x92>
 6e6:	12 e0       	ldi	r17, 0x02	; 2
	{

		str[i]= num % 10;
 6e8:	0f 2e       	mov	r0, r31
 6ea:	fa e0       	ldi	r31, 0x0A	; 10
 6ec:	4f 2e       	mov	r4, r31
 6ee:	51 2c       	mov	r5, r1
 6f0:	61 2c       	mov	r6, r1
 6f2:	71 2c       	mov	r7, r1
 6f4:	f0 2d       	mov	r31, r0
 6f6:	aa 24       	eor	r10, r10
 6f8:	a3 94       	inc	r10
 6fa:	b1 2c       	mov	r11, r1
 6fc:	ac 0e       	add	r10, r28
 6fe:	bd 1e       	adc	r11, r29
 700:	a1 0e       	add	r10, r17
 702:	b1 1c       	adc	r11, r1
 704:	17 fd       	sbrc	r17, 7
 706:	ba 94       	dec	r11
 708:	c7 01       	movw	r24, r14
 70a:	b6 01       	movw	r22, r12
 70c:	a3 01       	movw	r20, r6
 70e:	92 01       	movw	r18, r4
 710:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__divmodsi4>
 714:	f5 01       	movw	r30, r10
 716:	60 83       	st	Z, r22
		num   = num / 10;
 718:	c2 2e       	mov	r12, r18
 71a:	d3 2e       	mov	r13, r19
 71c:	e4 2e       	mov	r14, r20
 71e:	f5 2e       	mov	r15, r21
 720:	11 50       	subi	r17, 0x01	; 1
	{
		LCD_WriteChar('-');
		num*=-1;
	}
	
	while(num>0)
 722:	1c 14       	cp	r1, r12
 724:	1d 04       	cpc	r1, r13
 726:	1e 04       	cpc	r1, r14
 728:	1f 04       	cpc	r1, r15
 72a:	2c f3       	brlt	.-54     	; 0x6f6 <LCD_WriteIntger+0x5c>
		i--;
	}
	
	for(i=0;i<l;i++)
	{
		LCD_WriteChar(48+str[i]);
 72c:	89 81       	ldd	r24, Y+1	; 0x01
 72e:	80 5d       	subi	r24, 0xD0	; 208
 730:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_WriteChar>
 734:	8a 81       	ldd	r24, Y+2	; 0x02
 736:	80 5d       	subi	r24, 0xD0	; 208
 738:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_WriteChar>
	}
 73c:	0f 90       	pop	r0
 73e:	0f 90       	pop	r0
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
 746:	ff 90       	pop	r15
 748:	ef 90       	pop	r14
 74a:	df 90       	pop	r13
 74c:	cf 90       	pop	r12
 74e:	bf 90       	pop	r11
 750:	af 90       	pop	r10
 752:	7f 90       	pop	r7
 754:	6f 90       	pop	r6
 756:	5f 90       	pop	r5
 758:	4f 90       	pop	r4
 75a:	08 95       	ret

0000075c <main>:
int main(void)
{
    /* Replace with your application code */
	//uint8 value = 0;
	
	LCD_Init();
 75c:	0e 94 9d 02 	call	0x53a	; 0x53a <LCD_Init>
	KeyPad_Init();
 760:	0e 94 b3 01 	call	0x366	; 0x366 <KeyPad_Init>
	TEMP_Init();
 764:	0e 94 d6 04 	call	0x9ac	; 0x9ac <TEMP_Init>
	
	LCD_GoTo(0,0);
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	0e 94 34 03 	call	0x668	; 0x668 <LCD_GoTo>
	LCD_Clear();
 770:	0e 94 49 03 	call	0x692	; 0x692 <LCD_Clear>
	LCD_WriteString("  welcome sir   ");
 774:	80 e7       	ldi	r24, 0x70	; 112
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteString>

	
    while (1) 
    {
		PASSWORD_FUN();
 77c:	0e 94 9f 04 	call	0x93e	; 0x93e <PASSWORD_FUN>
 780:	fd cf       	rjmp	.-6      	; 0x77c <main+0x20>

00000782 <TEMP_FUN>:
		
 }
	
	void TEMP_FUN(void)
	{
		LCD_WriteString("TEMP(S) = ");
 782:	81 e8       	ldi	r24, 0x81	; 129
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteString>
		
		while(1){
		val = KeyPad_GetValue();
 78a:	0e 94 00 02 	call	0x400	; 0x400 <KeyPad_GetValue>
			
		val=0;
 78e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <val>
		val = KeyPad_GetValue();
 792:	0e 94 00 02 	call	0x400	; 0x400 <KeyPad_GetValue>
 796:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <val>
			
		TEMP_Read(&temp);
 79a:	8e e1       	ldi	r24, 0x1E	; 30
 79c:	91 e0       	ldi	r25, 0x01	; 1
 79e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <TEMP_Read>
		val = KeyPad_GetValue();
 7a2:	0e 94 00 02 	call	0x400	; 0x400 <KeyPad_GetValue>
 7a6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <val>
		
		LCD_GoTo(0,11);
 7aa:	6b e0       	ldi	r22, 0x0B	; 11
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	0e 94 34 03 	call	0x668	; 0x668 <LCD_GoTo>
		val = KeyPad_GetValue();
 7b2:	0e 94 00 02 	call	0x400	; 0x400 <KeyPad_GetValue>
 7b6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <val>
		
		LCD_WriteIntger(temp);
 7ba:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end>
 7be:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__data_end+0x1>
 7c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end+0x2>
 7c6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x3>
 7ca:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_WriteIntger>
		val = KeyPad_GetValue();
 7ce:	0e 94 00 02 	call	0x400	; 0x400 <KeyPad_GetValue>
 7d2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <val>
		
		if (val=='c'){val=0; LCD_Clear(); LCD_WriteString(" reset  password"); LCD_Clear(); main();}
 7d6:	83 36       	cpi	r24, 0x63	; 99
 7d8:	61 f4       	brne	.+24     	; 0x7f2 <TEMP_FUN+0x70>
 7da:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <val>
 7de:	0e 94 49 03 	call	0x692	; 0x692 <LCD_Clear>
 7e2:	8c e8       	ldi	r24, 0x8C	; 140
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteString>
 7ea:	0e 94 49 03 	call	0x692	; 0x692 <LCD_Clear>
 7ee:	0e 94 ae 03 	call	0x75c	; 0x75c <main>
 7f2:	2f ef       	ldi	r18, 0xFF	; 255
 7f4:	80 e7       	ldi	r24, 0x70	; 112
 7f6:	92 e0       	ldi	r25, 0x02	; 2
 7f8:	21 50       	subi	r18, 0x01	; 1
 7fa:	80 40       	sbci	r24, 0x00	; 0
 7fc:	90 40       	sbci	r25, 0x00	; 0
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <TEMP_FUN+0x76>
 800:	00 c0       	rjmp	.+0      	; 0x802 <TEMP_FUN+0x80>
 802:	00 00       	nop
	
		 _delay_ms(50);
		 
		val = KeyPad_GetValue();
 804:	0e 94 00 02 	call	0x400	; 0x400 <KeyPad_GetValue>
 808:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <val>
		         }
 80c:	be cf       	rjmp	.-132    	; 0x78a <TEMP_FUN+0x8>

0000080e <CHACKPASS_FUN>:

CHACKPASS_FUN();	
		}
		
void CHACKPASS_FUN(void)
{
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
	
 LCD_Clear();		
 812:	0e 94 49 03 	call	0x692	; 0x692 <LCD_Clear>
LCD_GoTo(0,0);
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	0e 94 34 03 	call	0x668	; 0x668 <LCD_GoTo>
LCD_WriteString("enter pass = "); //start from location 14 in lcd ro 2.		
 81e:	8d e9       	ldi	r24, 0x9D	; 157
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteString>
		
while(1){
	
    val=0;
 826:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <val>
    val = KeyPad_GetValue();
 82a:	0e 94 00 02 	call	0x400	; 0x400 <KeyPad_GetValue>
 82e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <val>
	
	if (val && i==0){LCD_WriteChar('*');load[i]=val;i++;val=0;}
 832:	88 23       	and	r24, r24
 834:	c1 f3       	breq	.-16     	; 0x826 <CHACKPASS_FUN+0x18>
 836:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <i>
 83a:	81 11       	cpse	r24, r1
 83c:	79 c0       	rjmp	.+242    	; 0x930 <__stack+0xd1>
 83e:	8a e2       	ldi	r24, 0x2A	; 42
 840:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_WriteChar>
 844:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <i>
 848:	e8 2f       	mov	r30, r24
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	ee 5d       	subi	r30, 0xDE	; 222
 84e:	fe 4f       	sbci	r31, 0xFE	; 254
 850:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <val>
 854:	90 83       	st	Z, r25
 856:	8f 5f       	subi	r24, 0xFF	; 255
 858:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <i>
 85c:	e4 cf       	rjmp	.-56     	; 0x826 <CHACKPASS_FUN+0x18>
	  if (val && i==1){LCD_WriteChar('*');load[i]=val;i++;val=0;}
 85e:	8a e2       	ldi	r24, 0x2A	; 42
 860:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_WriteChar>
 864:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <i>
 868:	e8 2f       	mov	r30, r24
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	ee 5d       	subi	r30, 0xDE	; 222
 86e:	fe 4f       	sbci	r31, 0xFE	; 254
 870:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <val>
 874:	90 83       	st	Z, r25
 876:	8f 5f       	subi	r24, 0xFF	; 255
 878:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <i>
 87c:	d4 cf       	rjmp	.-88     	; 0x826 <CHACKPASS_FUN+0x18>
		if (val && i==2){LCD_WriteChar('*');load[i]=val;i=0;val=0;break;}
 87e:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <i>
 882:	82 30       	cpi	r24, 0x02	; 2
 884:	81 f6       	brne	.-96     	; 0x826 <CHACKPASS_FUN+0x18>
 886:	8a e2       	ldi	r24, 0x2A	; 42
 888:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_WriteChar>
 88c:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <i>
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	ee 5d       	subi	r30, 0xDE	; 222
 894:	fe 4f       	sbci	r31, 0xFE	; 254
 896:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <val>
 89a:	80 83       	st	Z, r24
 89c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <i>
 8a0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <val>
		}
		
	LCD_Clear();
 8a4:	0e 94 49 03 	call	0x692	; 0x692 <LCD_Clear>
	uint8 s=0,l=0;
	for(i=0;i<3;i++)
 8a8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <i>
 8ac:	80 e0       	ldi	r24, 0x00	; 0
	{
		s=save[i];l=load[i];
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	fc 01       	movw	r30, r24
 8b2:	eb 5d       	subi	r30, 0xDB	; 219
 8b4:	fe 4f       	sbci	r31, 0xFE	; 254
 8b6:	d0 81       	ld	r29, Z
 8b8:	fc 01       	movw	r30, r24
 8ba:	ee 5d       	subi	r30, 0xDE	; 222
 8bc:	fe 4f       	sbci	r31, 0xFE	; 254
 8be:	c0 81       	ld	r28, Z
		if (s!=l)
 8c0:	dc 17       	cp	r29, r28
 8c2:	c9 f0       	breq	.+50     	; 0x8f6 <__stack+0x97>
		{
			LCD_Clear();
 8c4:	0e 94 49 03 	call	0x692	; 0x692 <LCD_Clear>
			LCD_WriteString(" error password ");
 8c8:	8b ea       	ldi	r24, 0xAB	; 171
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteString>
			LCD_GoTo(1,0);
 8d0:	60 e0       	ldi	r22, 0x00	; 0
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	0e 94 34 03 	call	0x668	; 0x668 <LCD_GoTo>
			LCD_WriteString("wait 1s to enter");
 8d8:	8c eb       	ldi	r24, 0xBC	; 188
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteString>
 8e0:	2f ef       	ldi	r18, 0xFF	; 255
 8e2:	81 ee       	ldi	r24, 0xE1	; 225
 8e4:	94 e0       	ldi	r25, 0x04	; 4
 8e6:	21 50       	subi	r18, 0x01	; 1
 8e8:	80 40       	sbci	r24, 0x00	; 0
 8ea:	90 40       	sbci	r25, 0x00	; 0
 8ec:	e1 f7       	brne	.-8      	; 0x8e6 <__stack+0x87>
 8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <__stack+0x91>
 8f0:	00 00       	nop
			_delay_ms(100);
			CHACKPASS_FUN();
 8f2:	0e 94 07 04 	call	0x80e	; 0x80e <CHACKPASS_FUN>
		if (val && i==2){LCD_WriteChar('*');load[i]=val;i=0;val=0;break;}
		}
		
	LCD_Clear();
	uint8 s=0,l=0;
	for(i=0;i<3;i++)
 8f6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <i>
 8fa:	8f 5f       	subi	r24, 0xFF	; 255
 8fc:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <i>
 900:	83 30       	cpi	r24, 0x03	; 3
 902:	a8 f2       	brcs	.-86     	; 0x8ae <__stack+0x4f>
			LCD_WriteString("wait 1s to enter");
			_delay_ms(100);
			CHACKPASS_FUN();
		}
	}
	if (s==l)       {LCD_Clear();
 904:	dc 13       	cpse	r29, r28
 906:	18 c0       	rjmp	.+48     	; 0x938 <__stack+0xd9>
 908:	0e 94 49 03 	call	0x692	; 0x692 <LCD_Clear>
		             LCD_WriteString("password correct");
 90c:	8d ec       	ldi	r24, 0xCD	; 205
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteString>
		             LCD_GoTo(1,0);
 914:	60 e0       	ldi	r22, 0x00	; 0
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	0e 94 34 03 	call	0x668	; 0x668 <LCD_GoTo>
		             LCD_WriteString("move to temp sys");
 91c:	8e ed       	ldi	r24, 0xDE	; 222
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteString>
					 LCD_Clear();
 924:	0e 94 49 03 	call	0x692	; 0x692 <LCD_Clear>
					 i=0;
 928:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <i>
		TEMP_FUN(); }   // generc adc 
 92c:	0e 94 c1 03 	call	0x782	; 0x782 <TEMP_FUN>
	
    val=0;
    val = KeyPad_GetValue();
	
	if (val && i==0){LCD_WriteChar('*');load[i]=val;i++;val=0;}
	  if (val && i==1){LCD_WriteChar('*');load[i]=val;i++;val=0;}
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	09 f0       	breq	.+2      	; 0x936 <__stack+0xd7>
 934:	a4 cf       	rjmp	.-184    	; 0x87e <__stack+0x1f>
 936:	93 cf       	rjmp	.-218    	; 0x85e <CHACKPASS_FUN+0x50>
		             LCD_WriteString("move to temp sys");
					 LCD_Clear();
					 i=0;
		TEMP_FUN(); }   // generc adc 
		
 }
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	08 95       	ret

0000093e <PASSWORD_FUN>:
sint32 temp = 0;

void PASSWORD_FUN(void)
{
		
LCD_GoTo(1,0);
 93e:	60 e0       	ldi	r22, 0x00	; 0
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	0e 94 34 03 	call	0x668	; 0x668 <LCD_GoTo>
LCD_WriteString("save pass = "); //start from location 14 in lcd ro 2.
 946:	8f ee       	ldi	r24, 0xEF	; 239
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteString>

while(1){
		
		val = KeyPad_GetValue();
 94e:	0e 94 00 02 	call	0x400	; 0x400 <KeyPad_GetValue>
 952:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <val>
		if(val){save[i]=val; i++; LCD_WriteChar(val);val=0;}
 956:	88 23       	and	r24, r24
 958:	71 f0       	breq	.+28     	; 0x976 <PASSWORD_FUN+0x38>
 95a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <i>
 95e:	e9 2f       	mov	r30, r25
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	eb 5d       	subi	r30, 0xDB	; 219
 964:	fe 4f       	sbci	r31, 0xFE	; 254
 966:	80 83       	st	Z, r24
 968:	9f 5f       	subi	r25, 0xFF	; 255
 96a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <i>
 96e:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_WriteChar>
 972:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <val>
        if (i==3){i=0;break;}
 976:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <i>
 97a:	83 30       	cpi	r24, 0x03	; 3
 97c:	41 f7       	brne	.-48     	; 0x94e <PASSWORD_FUN+0x10>
 97e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <i>
		}
		
		LCD_Clear();
 982:	0e 94 49 03 	call	0x692	; 0x692 <LCD_Clear>
 LCD_GoTo(0,0);
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	0e 94 34 03 	call	0x668	; 0x668 <LCD_GoTo>
 LCD_WriteString("   thank you   "); //start from location 14 in lcd ro 2.       
 98e:	8c ef       	ldi	r24, 0xFC	; 252
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteString>
LCD_GoTo(1,0);
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	0e 94 34 03 	call	0x668	; 0x668 <LCD_GoTo>
LCD_WriteString(" password saved "); //start from location 14 in lcd ro 2.
 99e:	8c e0       	ldi	r24, 0x0C	; 12
 9a0:	91 e0       	ldi	r25, 0x01	; 1
 9a2:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_WriteString>

CHACKPASS_FUN();	
 9a6:	0e 94 07 04 	call	0x80e	; 0x80e <CHACKPASS_FUN>
 9aa:	08 95       	ret

000009ac <TEMP_Init>:
#include "temp.h"


void TEMP_Init(void)
{
	ADC_Init();
 9ac:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
 9b0:	08 95       	ret

000009b2 <TEMP_Read>:
}
void TEMP_Read(uint16* TEMP)
{
	ADC_Read(TEMP);
 9b2:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_Read>
 9b6:	08 95       	ret

000009b8 <__divmodsi4>:
 9b8:	05 2e       	mov	r0, r21
 9ba:	97 fb       	bst	r25, 7
 9bc:	1e f4       	brtc	.+6      	; 0x9c4 <__divmodsi4+0xc>
 9be:	00 94       	com	r0
 9c0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__negsi2>
 9c4:	57 fd       	sbrc	r21, 7
 9c6:	07 d0       	rcall	.+14     	; 0x9d6 <__divmodsi4_neg2>
 9c8:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__udivmodsi4>
 9cc:	07 fc       	sbrc	r0, 7
 9ce:	03 d0       	rcall	.+6      	; 0x9d6 <__divmodsi4_neg2>
 9d0:	4e f4       	brtc	.+18     	; 0x9e4 <__divmodsi4_exit>
 9d2:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__negsi2>

000009d6 <__divmodsi4_neg2>:
 9d6:	50 95       	com	r21
 9d8:	40 95       	com	r20
 9da:	30 95       	com	r19
 9dc:	21 95       	neg	r18
 9de:	3f 4f       	sbci	r19, 0xFF	; 255
 9e0:	4f 4f       	sbci	r20, 0xFF	; 255
 9e2:	5f 4f       	sbci	r21, 0xFF	; 255

000009e4 <__divmodsi4_exit>:
 9e4:	08 95       	ret

000009e6 <__negsi2>:
 9e6:	90 95       	com	r25
 9e8:	80 95       	com	r24
 9ea:	70 95       	com	r23
 9ec:	61 95       	neg	r22
 9ee:	7f 4f       	sbci	r23, 0xFF	; 255
 9f0:	8f 4f       	sbci	r24, 0xFF	; 255
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	08 95       	ret

000009f6 <__udivmodsi4>:
 9f6:	a1 e2       	ldi	r26, 0x21	; 33
 9f8:	1a 2e       	mov	r1, r26
 9fa:	aa 1b       	sub	r26, r26
 9fc:	bb 1b       	sub	r27, r27
 9fe:	fd 01       	movw	r30, r26
 a00:	0d c0       	rjmp	.+26     	; 0xa1c <__udivmodsi4_ep>

00000a02 <__udivmodsi4_loop>:
 a02:	aa 1f       	adc	r26, r26
 a04:	bb 1f       	adc	r27, r27
 a06:	ee 1f       	adc	r30, r30
 a08:	ff 1f       	adc	r31, r31
 a0a:	a2 17       	cp	r26, r18
 a0c:	b3 07       	cpc	r27, r19
 a0e:	e4 07       	cpc	r30, r20
 a10:	f5 07       	cpc	r31, r21
 a12:	20 f0       	brcs	.+8      	; 0xa1c <__udivmodsi4_ep>
 a14:	a2 1b       	sub	r26, r18
 a16:	b3 0b       	sbc	r27, r19
 a18:	e4 0b       	sbc	r30, r20
 a1a:	f5 0b       	sbc	r31, r21

00000a1c <__udivmodsi4_ep>:
 a1c:	66 1f       	adc	r22, r22
 a1e:	77 1f       	adc	r23, r23
 a20:	88 1f       	adc	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	1a 94       	dec	r1
 a26:	69 f7       	brne	.-38     	; 0xa02 <__udivmodsi4_loop>
 a28:	60 95       	com	r22
 a2a:	70 95       	com	r23
 a2c:	80 95       	com	r24
 a2e:	90 95       	com	r25
 a30:	9b 01       	movw	r18, r22
 a32:	ac 01       	movw	r20, r24
 a34:	bd 01       	movw	r22, r26
 a36:	cf 01       	movw	r24, r30
 a38:	08 95       	ret

00000a3a <_exit>:
 a3a:	f8 94       	cli

00000a3c <__stop_program>:
 a3c:	ff cf       	rjmp	.-2      	; 0xa3c <__stop_program>
